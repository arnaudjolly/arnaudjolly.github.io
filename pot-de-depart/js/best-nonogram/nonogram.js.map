{"version":3,"file":"nonogram.min.js","mappings":"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G,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,IAAK,CAAC,EAAG,EAAG,EAAG,EAAG,IAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,CAAC,EAAG,EAAG,EAAG,EAAG,IAAK,CAAC,EAAG,GAAI,IAAK,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,KAEnkBL,IAAQ,CACP,CAAC,GAAI,IAAK,CAAC,EAAG,EAAG,EAAG,IAAK,CAAC,EAAG,EAAG,EAAG,EAAG,IAAK,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,CAAC,EAAG,EAAG,GAAI,GAAI,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,GAAI,EAAG,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","sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/utility.js","webpack:///./src/puzzle.js","webpack:///./src/puzzle-cell.js","webpack:///./src/puzzle-line.js","webpack:///./src/solver.js","webpack:///./src/creator.js","webpack:///./src/gui-template.js","webpack:///./src/puzzle-library.js","webpack:///./src/gui.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Nonogram\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Nonogram\"] = factory();\n\telse\n\t\troot[\"Nonogram\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export {Utility};\r\n\r\n\r\n/**\r\n * @class\r\n * @type {Utility}\r\n * @this Utility\r\n */\r\nconst Utility = class\r\n{\r\n\t/**\r\n\t *\r\n\t * @param array\r\n\t * @param value\r\n\t * @returns {array}\r\n\t */\r\n\tstatic removeFromArray( array, value )\r\n\t{\r\n\t\tconst index = array.indexOf( value );\r\n\r\n\t\tif (index !== -1) {\r\n\t\t\tarray.splice( index, 1 );\r\n\t\t}\r\n\r\n\t\treturn array;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param length\r\n\t * @returns {array}\r\n\t */\r\n\tstatic getZeroFilledArray( length )\r\n\t{\r\n\t\treturn new Array( length ).fill( 0 );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param array\r\n\t * @returns {array}\r\n\t */\r\n\tstatic cloneArray( array )\r\n\t{\r\n\t\treturn array.slice( 0 );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param min\r\n\t * @param max\r\n\t * @returns {number}\r\n\t */\r\n\tstatic getRandomIntBetween( min, max )\r\n\t{\r\n\t\tlet minCeil  = Math.ceil( min ),\r\n\t\t\tmaxFloor = Math.floor( max )\r\n\t\t;\r\n\r\n\t\treturn Math.floor( Math.random() * (maxFloor - minCeil + 1) ) + minCeil;\r\n\t}\r\n\r\n};\r\n\r\n\r\n","import {Utility} from '../src/utility.js';\r\n\r\n\r\nexport {Puzzle};\r\n\r\n/**\r\n * @class\r\n * @type {Puzzle}\r\n * @this Puzzle\r\n *\r\n * the main puzzle class containing the grid of cells, row/column hints, etc.\r\n *\r\n * @property {number} width\r\n * @property {number} height\r\n * @property {number} totalCells\r\n * @property {array} cells\r\n * @property {array} rowHints\r\n * @property {array} columnHints\r\n * @property {Creator|null} creator\r\n * @property {array} grid - a multi-dimensional array representing rows and columns.\r\n *                   for example a 2x2 grid could be represented by [[0,1],[0,0]]\r\n */\r\nconst Puzzle = class\r\n{\r\n\t/**\r\n\t * @param {number} width - an integer >= 1 specifying the number of rows\r\n\t * @param {number} height - an integer >= 1 specifying the number of columns\r\n\t * @throws - error if width or height are invalid\r\n\t */\r\n\tconstructor( width, height )\r\n\t{\r\n\t\tif (typeof width === 'undefined' || typeof height === 'undefined') {\r\n\r\n\t\t\tthrow('width and height are required constructor parameters.');\r\n\r\n\t\t} else if ((width <= 0 || height <= 0) || (width === 1 && height === 1)) {\r\n\r\n\t\t\tthrow('invalid dimensions: ' + width.toString() + ' x ' + height.toString());\r\n\t\t}\r\n\r\n\t\tthis.width      = typeof width === 'number' ? width : parseInt( width.toString(), 10 );\r\n\t\tthis.height     = typeof height === 'number' ? height : parseInt( height.toString(), 10 );\r\n\t\tthis.totalCells = this.width * this.height;\r\n\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * empty all arrays and create zero-filled multidimensional grid array\r\n\t */\r\n\treset()\r\n\t{\r\n\t\tconst zeroFill = Utility.getZeroFilledArray;\r\n\r\n\t\tthis.creator     = null;\r\n\t\tthis.cells       = [];\r\n\t\tthis.rowHints    = [];\r\n\t\tthis.columnHints = [];\r\n\t\tthis.grid        = zeroFill( this.height ).map( () =>\r\n\t\t{\r\n\t\t\treturn zeroFill( this.width );\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @returns {boolean}\r\n\t */\r\n\tcheckUserSolution()\r\n\t{\r\n\t\treturn this.cells.every( ( cell ) =>\r\n\t\t{\r\n\t\t\t// cell.solution will be 0 or 1, but cell.userSolution might be null, 0 or 1\r\n\t\t\tconst userValue = cell.userSolution === 1 ? 1 : 0;\r\n\r\n\t\t\treturn cell.solution === userValue;\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @param {number} row\r\n\t * @returns {array|boolean}\r\n\t */\r\n\tgetRowCells( row )\r\n\t{\r\n\t\tconst cells = [];\r\n\t\tlet start   = row * this.width,\r\n\t\t\tend     = start + this.width,\r\n\t\t\ti\r\n\t\t;\r\n\r\n\t\tfor (i = start; i < end; i++) {\r\n\t\t\tcells.push( this.cells[i] );\r\n\t\t}\r\n\r\n\t\treturn cells.length > 0 ? cells : false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @param {number} column\r\n\t * @returns {array|boolean}\r\n\t */\r\n\tgetColumnCells( column )\r\n\t{\r\n\t\tconst cells = [];\r\n\t\tlet i;\r\n\r\n\t\tfor (i = column; i < this.cells.length; i += this.width) {\r\n\t\t\tcells.push( this.cells[i] );\r\n\t\t}\r\n\r\n\t\treturn cells.length > 0 ? cells : false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @param {number|string} index\r\n\t * @returns {object|boolean}\r\n\t */\r\n\tgetCellByIndex( index )\r\n\t{\r\n\t\tconst indexInt = typeof index !== 'number' ? parseInt( index, 10 ) : index;\r\n\r\n\t\treturn this.cells[indexInt] ? this.cells[indexInt] : false;\r\n\t}\r\n\r\n};\r\n\r\n","export {PuzzleCell};\r\n\r\n\r\n/**\r\n * @class\r\n * @type {PuzzleCell}\r\n * @this PuzzleCell\r\n *\r\n * a container representing a single cell in the puzzle grid\r\n *\r\n * @property {number} index\r\n * @property {number} column\r\n * @property {number} row\r\n * @property {*} solution - null, 0, or 1\r\n * @property {*} userSolution - null, 0, or 1\r\n * @property {*} aiSolution - null, 0, or 1\r\n */\r\nconst PuzzleCell = class\r\n{\r\n\tconstructor( params )\r\n\t{\r\n\t\tthis.index        = -1;\r\n\t\tthis.column       = -1;\r\n\t\tthis.row          = -1;\r\n\t\tthis.solution     = null;\r\n\t\tthis.userSolution = null;\r\n\t\tthis.aiSolution   = null;\r\n\r\n\t\tObject.assign( this, params );\r\n\t}\r\n};\r\n\r\n","export {PuzzleLine};\r\n\r\n\r\n/**\r\n * @class\r\n * @type {PuzzleLine}\r\n * @this PuzzleLine\r\n *\r\n * a container representing a complete row or column of grid cells\r\n *\r\n * @property {string} type - either 'row' or 'column'\r\n * @property {number} index - the column or row index\r\n * @property {number} length\r\n * @property {number} minimumSectionLength\r\n * @property {array} sections\r\n * @property {array} cells\r\n * @property {boolean} solved\r\n */\r\nconst PuzzleLine = class\r\n{\r\n\tconstructor( params )\r\n\t{\r\n\t\tthis.type                 = '';\r\n\t\tthis.index                = -1;\r\n\t\tthis.length               = 0;\r\n\t\tthis.minimumSectionLength = 0;\r\n\t\tthis.sections             = [];\r\n\t\tthis.cells                = [];\r\n\t\tthis.solved               = false;\r\n\r\n\t\tObject.assign( this, params );\r\n\t}\r\n};\r\n\r\n\r\n\r\n\r\n","import {PuzzleLine} from '../src/puzzle-line.js';\r\nimport {Utility} from '../src/utility.js';\r\n\r\n\r\nexport {Solver};\r\n\r\n/**\r\n * @class\r\n * @type {Solver}\r\n * @this Solver\r\n *\r\n * a class that solves nonogram puzzles using logical techniques a human might use\r\n *\r\n * @property {Puzzle} puzzle\r\n * @property {number} elapsedTime\r\n * @property {boolean} isReset\r\n * @property {array} lines\r\n * @property {array} solutionLog\r\n */\r\nconst Solver = class\r\n{\r\n\r\n\t/**\r\n\t * @param {Puzzle} puzzle\r\n\t */\r\n\tconstructor( puzzle )\r\n\t{\r\n\t\tthis.puzzle = puzzle;\r\n\r\n\t\tthis._reset();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @returns {boolean}\r\n\t */\r\n\tsolve()\r\n\t{\r\n\t\tconst start      = new Date().getTime();\r\n\t\tlet lastProgress = -1,\r\n\t\t\tpass         = 1,\r\n\t\t\tsolved, passStart, passEnd, end, passElapsedTime, totalElapsedTime, lineKey, line\r\n\t\t;\r\n\r\n\t\tif (!this.isReset) {\r\n\t\t\tthis._reset();\r\n\t\t}\r\n\r\n\t\tthis.isReset = false;\r\n\t\tthis._log( 'Starting solve algorithm', 'info' );\r\n\r\n\r\n\t\twhile (this._getProgress() > lastProgress && this._getTotalSolved() < this.puzzle.cells.length) {\r\n\r\n\t\t\tpassStart    = new Date().getTime();\r\n\t\t\tlastProgress = this._getProgress();\r\n\r\n\t\t\tfor (lineKey = 0; lineKey < this.lines.length; lineKey++) {\r\n\r\n\t\t\t\tline = this.lines[lineKey];\r\n\r\n\t\t\t\tif (!line.solved) {\r\n\t\t\t\t\tthis.eliminateImpossibleFits( line );\r\n\t\t\t\t}\r\n\t\t\t\tif (!line.solved) {\r\n\t\t\t\t\tthis.findKnownPositivesAndNegatives( line );\r\n\t\t\t\t}\r\n\t\t\t\tif (!line.solved) {\r\n\t\t\t\t\tthis.findSectionDefiningChains( line );\r\n\t\t\t\t}\r\n\t\t\t\tif (!line.solved) {\r\n\t\t\t\t\tthis.findAnchoredSections( line );\r\n\t\t\t\t}\r\n\t\t\t\tif (!line.solved) {\r\n\t\t\t\t\tthis.findCompletedSections( line );\r\n\t\t\t\t}\r\n\t\t\t\tif (!line.solved) {\r\n\t\t\t\t\tthis.findCompletedLines( line );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tpassEnd         = new Date().getTime();\r\n\t\t\tpassElapsedTime = (passEnd - passStart) / 1000;\r\n\r\n\t\t\tthis._log( 'Pass ' + pass + ' completed in ' + passElapsedTime + ' seconds :: '\r\n\t\t\t\t+ this._getTotalSolved() + '/' + this.puzzle.cells.length + ' cells solved', 'info'\r\n\t\t\t);\r\n\t\t\tpass++;\r\n\t\t}\r\n\r\n\t\tsolved           = this._getTotalSolved() === this.puzzle.cells.length;\r\n\t\tend              = new Date().getTime();\r\n\t\ttotalElapsedTime = (end - start) / 1000;\r\n\r\n\t\tthis._log( 'Solve algorithm finished in ' + totalElapsedTime + ' seconds.', 'info' );\r\n\r\n\t\tif (solved) {\r\n\t\t\tthis._log( 'Solution Found.', 'success' );\r\n\t\t} else {\r\n\t\t\tthis._log( 'Could not find solution.', 'failure' );\r\n\t\t}\r\n\r\n\t\tthis.elapsedTime = totalElapsedTime;\r\n\r\n\t\treturn solved;\r\n\t}\r\n\r\n\r\n\t//\t#############################################################################################\tsolution algorithms\r\n\r\n\t/**\r\n\t *\r\n\t * @param {PuzzleLine} line\r\n\t */\r\n\teliminateImpossibleFits( line )\r\n\t{\r\n\t\tlet minimumStartIndex = 0,\r\n\t\t\tmaximumStartIndex = line.length - line.minimumSectionLength,\r\n\t\t\ti, section, possibleStartIndex, newPossibleStartIndexes, lineSectionKey, startIndexKey, testCell, end,\r\n\t\t\tlineCellKey, lineKey\r\n\t\t;\r\n\r\n\r\n\t\t// no sections\r\n\r\n\t\tif (line.sections.length === 0) {\r\n\r\n\t\t\tfor (lineCellKey = 0; lineCellKey < line.cells.length; lineCellKey++) {\r\n\t\t\t\tthis._setCellSolution( line.cells[lineCellKey], 0 );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// tighten range if one or more known negative cells start the line\r\n\r\n\t\tfor (lineKey = 0; lineKey < line.length; lineKey++) {\r\n\r\n\t\t\tif (line.cells[lineKey].aiSolution === 0) {\r\n\t\t\t\tminimumStartIndex++;\r\n\t\t\t} else {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// tighten range if one or more known negative cells end the line\r\n\r\n\t\tfor (lineKey = line.length - 1; lineKey >= 0; lineKey--) {\r\n\t\t\tif (line.cells[lineKey].aiSolution === 0) {\r\n\t\t\t\tmaximumStartIndex--;\r\n\t\t\t} else {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\tfor (lineSectionKey = 0; lineSectionKey < line.sections.length; lineSectionKey++) {\r\n\r\n\t\t\tsection                 = line.sections[lineSectionKey];\r\n\t\t\tnewPossibleStartIndexes = Utility.cloneArray( section.possibleStartIndexes );\r\n\r\n\t\t\t// eliminate places where section does not fit\r\n\r\n\t\t\tfor (startIndexKey = 0; startIndexKey < section.possibleStartIndexes.length; startIndexKey++) {\r\n\r\n\t\t\t\tpossibleStartIndex = section.possibleStartIndexes[startIndexKey];\r\n\r\n\t\t\t\ttestCell = line.cells[possibleStartIndex + section.length];\r\n\r\n\t\t\t\t// the total length of all sections including minimum gap(s) of one cell does not allow this section to fit:\r\n\r\n\t\t\t\tif (possibleStartIndex < minimumStartIndex || possibleStartIndex > maximumStartIndex) {\r\n\t\t\t\t\tnewPossibleStartIndexes = Utility.removeFromArray( newPossibleStartIndexes, possibleStartIndex );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// there is a known positive cell immediately following the possible section placement, so section cannot start here\r\n\r\n\t\t\t\tif (testCell && testCell.aiSolution === 1) {\r\n\t\t\t\t\tnewPossibleStartIndexes = Utility.removeFromArray( newPossibleStartIndexes, possibleStartIndex );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// there is a known impossible cell in this range, so section cannot fit here:\r\n\r\n\t\t\t\tend = possibleStartIndex + section.length - 1;\r\n\t\t\t\tend = (end > line.length - 1) ? line.length - 1 : end;\r\n\r\n\t\t\t\tfor (i = possibleStartIndex; i <= end; i++) {\r\n\t\t\t\t\tif (i > line.length - 1 || line.cells[i].aiSolution === 0) {\r\n\t\t\t\t\t\tnewPossibleStartIndexes = Utility.removeFromArray( newPossibleStartIndexes, possibleStartIndex );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\tminimumStartIndex += section.length + 1;\r\n\t\t\tmaximumStartIndex += section.length + 1;\r\n\r\n\t\t\tsection.possibleStartIndexes = newPossibleStartIndexes;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param {PuzzleLine} line\r\n\t */\r\n\tfindKnownPositivesAndNegatives( line )\r\n\t{\r\n\t\tconst totalCellCounts = Utility.getZeroFilledArray( line.length );\r\n\t\tlet sectionKey, section, cellCounts, startIndexKey, possibleStartIndex, start, end, i, cellCountKey, cellCount,\r\n\t\t\tcell;\r\n\r\n\t\tfor (sectionKey = 0; sectionKey < line.sections.length; sectionKey++) {\r\n\r\n\t\t\tsection    = line.sections[sectionKey];\r\n\t\t\tcellCounts = Utility.getZeroFilledArray( line.length );\r\n\r\n\t\t\t// keep two counts: 1) all common cells for this section, and 2) cells where no section can be\r\n\r\n\t\t\tfor (startIndexKey = 0; startIndexKey < section.possibleStartIndexes.length; startIndexKey++) {\r\n\r\n\t\t\t\tpossibleStartIndex = section.possibleStartIndexes[startIndexKey];\r\n\t\t\t\tstart              = possibleStartIndex;\r\n\t\t\t\tend                = start + section.length - 1;\r\n\r\n\t\t\t\tfor (i = start; i <= end; i++) {\r\n\t\t\t\t\tcellCounts[i]++;\r\n\t\t\t\t\ttotalCellCounts[i]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// common to all possibilities, solve as positive\r\n\r\n\t\t\tfor (cellCountKey = 0; cellCountKey < cellCounts.length; cellCountKey++) {\r\n\r\n\t\t\t\tcellCount = cellCounts[cellCountKey];\r\n\t\t\t\tcell      = line.cells[cellCountKey];\r\n\r\n\t\t\t\tif (cell && cell.aiSolution === null && cellCount === section.possibleStartIndexes.length) {\r\n\t\t\t\t\tthis._setCellSolution( cell, 1 );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// no possible cells, remove as a possibility\r\n\r\n\t\tfor (cellCountKey = 0; cellCountKey < totalCellCounts.length; cellCountKey++) {\r\n\r\n\t\t\tcellCount = totalCellCounts[cellCountKey];\r\n\t\t\tcell      = line.cells[cellCountKey];\r\n\r\n\t\t\tif (cell && cell.aiSolution === null && cellCount === 0) {\r\n\t\t\t\tthis._setCellSolution( cell, 0 );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param {PuzzleLine} line\r\n\t */\r\n\tfindAnchoredSections( line )\r\n\t{\r\n\t\tlet i, fillRange, firstSection, lastSection;\r\n\r\n\r\n\t\tif (line.sections.length > 0) {\r\n\r\n\t\t\tfirstSection = line.sections[0];\r\n\t\t\tlastSection  = line.sections[line.sections.length - 1];\r\n\r\n\t\t\t// find sections anchored to start of line\r\n\r\n\t\t\tfillRange = null;\r\n\r\n\t\t\tfor (i = 0; i < line.cells.length; i++) {\r\n\r\n\t\t\t\tif (line.cells[i].aiSolution === null) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t} else if (line.cells[i].aiSolution === 1) {\r\n\t\t\t\t\tfillRange = [i, i + firstSection.length - 1];\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (fillRange !== null) {\r\n\r\n\t\t\t\tfor (i = fillRange[0]; i <= fillRange[1]; i++) {\r\n\t\t\t\t\tif (line.cells[i]) {\r\n\t\t\t\t\t\tthis._setCellSolution( line.cells[i], 1 );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (line.cells[i]) {\r\n\t\t\t\t\tthis._setCellSolution( line.cells[i], 0 );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// find sections anchored to end of line\r\n\r\n\t\t\tfillRange = null;\r\n\r\n\t\t\tfor (i = line.cells.length - 1; i >= 0; i--) {\r\n\r\n\t\t\t\tif (line.cells[i].aiSolution === null) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t} else if (line.cells[i].aiSolution === 1) {\r\n\t\t\t\t\tfillRange = [i - lastSection.length + 1, i];\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (fillRange !== null) {\r\n\r\n\t\t\t\tfor (i = fillRange[0]; i <= fillRange[1]; i++) {\r\n\t\t\t\t\tif (line.cells[i]) {\r\n\t\t\t\t\t\tthis._setCellSolution( line.cells[i], 1 );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (line.cells[fillRange[0] - 1]) {\r\n\t\t\t\t\tthis._setCellSolution( line.cells[fillRange[0] - 1], 0 );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param {PuzzleLine} line\r\n\t */\r\n\tfindSectionDefiningChains( line )\r\n\t{\r\n\t\tlet chains    = [],\r\n\t\t\tlastValue = 0,\r\n\t\t\tcellKey, cell, chain, chainKey, sectionsSorted, firstSortedSection\r\n\t\t;\r\n\r\n\r\n\t\t// sort sections by highest length to lowest\r\n\r\n\t\tsectionsSorted     = Utility.cloneArray( line.sections ).sort( function ( a, b )\r\n\t\t{\r\n\t\t\treturn a.length > b.length ? -1 : 1;\r\n\t\t} );\r\n\t\tfirstSortedSection = sectionsSorted[0];\r\n\r\n\r\n\t\t// loop through all cells, creating array of connectors\r\n\r\n\t\tfor (cellKey = 0; cellKey < line.cells.length; cellKey++) {\r\n\r\n\t\t\tcell = line.cells[cellKey];\r\n\r\n\t\t\tif (cell.aiSolution === 1) {\r\n\r\n\t\t\t\tif (lastValue !== 1) {\r\n\t\t\t\t\tchain = {\r\n\t\t\t\t\t\tstart:  cellKey,\r\n\t\t\t\t\t\tlength: 1\r\n\t\t\t\t\t};\r\n\t\t\t\t\tchains.push( chain );\r\n\t\t\t\t} else if (chain) {\r\n\t\t\t\t\tchain.length++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlastValue = cell.aiSolution;\r\n\t\t}\r\n\r\n\r\n\t\t// if a connector is found with the first section's length, place negatives around it and mark the section as complete & continue\r\n\r\n\t\tfor (chainKey = 0; chainKey < chains.length; chainKey++) {\r\n\r\n\t\t\tchain = chains[chainKey];\r\n\r\n\t\t\tif (chain.length === firstSortedSection.length) {\r\n\r\n\t\t\t\tif (line.cells[chain.start - 1]) {\r\n\t\t\t\t\tthis._setCellSolution( line.cells[chain.start - 1], 0 );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (line.cells[chain.start + firstSortedSection.length]) {\r\n\t\t\t\t\tthis._setCellSolution( line.cells[chain.start + firstSortedSection.length], 0 );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfirstSortedSection.solved = true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param {PuzzleLine} line\r\n\t */\r\n\tfindCompletedSections( line )\r\n\t{\r\n\t\tlet sectionKey, section, firstNegative, lastNegative;\r\n\r\n\t\t// complete lines where all sections have been found\r\n\r\n\t\tfor (sectionKey = 0; sectionKey < line.sections.length; sectionKey++) {\r\n\r\n\t\t\tsection = line.sections[sectionKey];\r\n\r\n\r\n\t\t\t// only one possible place...\r\n\r\n\t\t\tif (!section.solved && section.possibleStartIndexes.length === 1) {\r\n\r\n\t\t\t\t// make sure there is a negative cell on either side of the section\r\n\r\n\t\t\t\tfirstNegative = section.possibleStartIndexes[0] - 1;\r\n\t\t\t\tlastNegative  = section.possibleStartIndexes[0] + section.length;\r\n\r\n\t\t\t\tif (line.cells[firstNegative] && line.cells[firstNegative].aiSolution === null) {\r\n\t\t\t\t\tthis._setCellSolution( line.cells[firstNegative], 0 );\r\n\t\t\t\t}\r\n\t\t\t\tif (line.cells[lastNegative] && line.cells[lastNegative].aiSolution === null) {\r\n\t\t\t\t\tthis._setCellSolution( line.cells[lastNegative], 0 );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsection.solved = true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param {PuzzleLine} line\r\n\t */\r\n\tfindCompletedLines( line )\r\n\t{\r\n\t\tlet totalSectionLength  = 0,\r\n\t\t\ttotalPositiveSolved = 0,\r\n\t\t\tsectionKey, section, cellKey, cell\r\n\t\t;\r\n\r\n\t\t// complete lines where all sections have been found\r\n\r\n\t\tfor (sectionKey = 0; sectionKey < line.sections.length; sectionKey++) {\r\n\r\n\t\t\tsection = line.sections[sectionKey];\r\n\t\t\ttotalSectionLength += section.length;\r\n\t\t}\r\n\r\n\t\tfor (cellKey = 0; cellKey < line.cells.length; cellKey++) {\r\n\r\n\t\t\tcell = line.cells[cellKey];\r\n\t\t\ttotalPositiveSolved += cell.aiSolution === 1;\r\n\t\t}\r\n\r\n\t\tif (totalSectionLength === totalPositiveSolved) {\r\n\r\n\t\t\tfor (cellKey = 0; cellKey < line.cells.length; cellKey++) {\r\n\r\n\t\t\t\tcell = line.cells[cellKey];\r\n\r\n\t\t\t\tif (cell.aiSolution === null) {\r\n\t\t\t\t\tthis._setCellSolution( cell, 0 );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t//\t#############################################################################################\tprivate methods\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @private\r\n\t */\r\n\t_reset()\r\n\t{\r\n\t\tconst possibleRowIndexes    = [],\r\n\t\t\t  possibleColumnIndexes = []\r\n\t\t;\r\n\t\tlet i, cellKey, rowNumber, rowHints, rowCells, line, index, len, columnKey, columnHint;\r\n\r\n\t\tthis.isReset     = true;\r\n\t\tthis.elapsedTime = 0;\r\n\t\tthis.solutionLog = [];\r\n\t\tthis.lines       = [];\r\n\r\n\t\tthis._log( 'Resetting variables', 'info' );\r\n\r\n\t\t// reset cell.aiSolution\r\n\r\n\t\tfor (cellKey = 0; cellKey < this.puzzle.cells.length; cellKey++) {\r\n\t\t\tthis.puzzle.cells[cellKey].aiSolution = null;\r\n\t\t}\r\n\r\n\t\t// reset possibleRowIndexes\r\n\r\n\t\tfor (i = 0; i < this.puzzle.width; i++) {\r\n\t\t\tpossibleRowIndexes.push( i );\r\n\t\t}\r\n\r\n\t\t// reset possibleColumnIndexes\r\n\r\n\t\tfor (i = 0; i < this.puzzle.height; i++) {\r\n\t\t\tpossibleColumnIndexes.push( i );\r\n\t\t}\r\n\r\n\t\t// reset rowHints\r\n\r\n\t\tfor (rowNumber = 0; rowNumber < this.puzzle.rowHints.length; rowNumber++) {\r\n\r\n\t\t\trowHints = this.puzzle.rowHints[rowNumber];\r\n\t\t\trowCells = this.puzzle.getRowCells( rowNumber );\r\n\r\n\t\t\tif (rowCells) {\r\n\r\n\t\t\t\tline = new PuzzleLine( {\r\n\t\t\t\t\ttype:   'row',\r\n\t\t\t\t\tindex:  rowNumber,\r\n\t\t\t\t\tlength: this.puzzle.width,\r\n\t\t\t\t\tcells:  rowCells\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tfor (index = 0; index < rowHints.length; index++) {\r\n\r\n\t\t\t\t\tlen = rowHints[index];\r\n\t\t\t\t\tline.sections.push( {\r\n\t\t\t\t\t\tindex:                index,\r\n\t\t\t\t\t\tlength:               len,\r\n\t\t\t\t\t\tpossibleStartIndexes: possibleRowIndexes,\r\n\t\t\t\t\t\tknownIndexes:         [],\r\n\t\t\t\t\t\tsolved:               false\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\tline.minimumSectionLength += len + 1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tline.minimumSectionLength--;\r\n\r\n\t\t\t\tthis.lines.push( line );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// reset columnHints\r\n\r\n\t\tfor (columnKey = 0; columnKey < this.puzzle.columnHints.length; columnKey++) {\r\n\r\n\t\t\tcolumnHint = this.puzzle.columnHints[columnKey];\r\n\t\t\tline       = new PuzzleLine( {\r\n\t\t\t\ttype:   'column',\r\n\t\t\t\tindex:  columnKey,\r\n\t\t\t\tlength: this.puzzle.height,\r\n\t\t\t\tcells:  this.puzzle.getColumnCells( columnKey ),\r\n\t\t\t} );\r\n\r\n\t\t\tfor (index = 0; index < columnHint.length; index++) {\r\n\t\t\t\tlen = columnHint[index];\r\n\t\t\t\tline.sections.push( {\r\n\t\t\t\t\tindex:                index,\r\n\t\t\t\t\tlength:               len,\r\n\t\t\t\t\tpossibleStartIndexes: possibleColumnIndexes,\r\n\t\t\t\t\tknownIndexes:         [],\r\n\t\t\t\t\tsolved:               false\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tline.minimumSectionLength += len + 1;\r\n\t\t\t}\r\n\r\n\t\t\tline.minimumSectionLength--;\r\n\r\n\t\t\tthis.lines.push( line );\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param {PuzzleCell} puzzleCell\r\n\t * @param {number} value\r\n\t * @private\r\n\t */\r\n\t_setCellSolution( puzzleCell, value )\r\n\t{\r\n\t\tlet lineKey, line, isRow, isCol, cellsSolved, cellKey, cell;\r\n\r\n\t\tif (puzzleCell.aiSolution !== null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tfor (lineKey = 0; lineKey < this.lines.length; lineKey++) {\r\n\r\n\t\t\tline        = this.lines[lineKey];\r\n\t\t\tisRow       = line.type === 'row' && line.index === puzzleCell.row;\r\n\t\t\tisCol       = line.type === 'column' && line.index === puzzleCell.column;\r\n\t\t\tcellsSolved = 0;\r\n\r\n\t\t\tif (isRow || isCol) {\r\n\r\n\t\t\t\tfor (cellKey = 0; cellKey < line.cells.length; cellKey++) {\r\n\r\n\t\t\t\t\tcell = line.cells[cellKey];\r\n\r\n\t\t\t\t\tif (cell.index === puzzleCell.index) {\r\n\t\t\t\t\t\tcell.aiSolution = value;\r\n\t\t\t\t\t\tcellsSolved++;\r\n\t\t\t\t\t} else if (cell.aiSolution !== null) {\r\n\t\t\t\t\t\tcellsSolved++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (cellsSolved === line.length) {\r\n\t\t\t\t\tline.solved = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param html\r\n\t * @param cssClass\r\n\t * @private\r\n\t */\r\n\t_log( html, cssClass )\r\n\t{\r\n\t\tthis.solutionLog.push( {\r\n\t\t\thtml:     html,\r\n\t\t\tcssClass: cssClass || 'info'\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @returns {number}\r\n\t * @private\r\n\t */\r\n\t_getTotalSolved()\r\n\t{\r\n\t\tlet total = 0,\r\n\t\t\tcellKey\r\n\t\t;\r\n\r\n\t\tfor (cellKey = 0; cellKey < this.puzzle.cells.length; cellKey++) {\r\n\t\t\ttotal += this.puzzle.cells[cellKey].aiSolution !== null;\r\n\t\t}\r\n\r\n\t\treturn total;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * calculate the maximum # of possible permutations, depending on the current state of the solving process.\r\n\t *\r\n\t * @returns {number}\r\n\t * @private\r\n\t */\r\n\t_getProgress()\r\n\t{\r\n\t\tlet maxPossibilities   = 0,\r\n\t\t\ttotalPossibilities = 0,\r\n\t\t\tlineKey, line, sectionKey\r\n\t\t;\r\n\r\n\t\tfor (lineKey = 0; lineKey < this.lines.length; lineKey++) {\r\n\r\n\t\t\tline = this.lines[lineKey];\r\n\t\t\tmaxPossibilities += line.sections.length * (line.type === 'row' ? this.puzzle.width : this.puzzle.height);\r\n\r\n\t\t\tfor (sectionKey = 0; sectionKey < line.sections.length; sectionKey++) {\r\n\t\t\t\ttotalPossibilities += line.sections[sectionKey].possibleStartIndexes.length;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn maxPossibilities - totalPossibilities;\r\n\t}\r\n\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {Puzzle} from '../src/puzzle.js';\r\nimport {PuzzleCell} from '../src/puzzle-cell.js';\r\nimport {Solver} from '../src/solver.js';\r\nimport {Utility} from '../src/utility.js';\r\n\r\n\r\nexport {Creator};\r\n\r\n/**\r\n * @class\r\n * @type {Creator}\r\n * @this Creator\r\n *\r\n * creates nonogram puzzles\r\n *\r\n * @property {Puzzle} puzzle\r\n * @property {array} log\r\n * @property {number} creationTime\r\n * @property {number} solvingTime\r\n */\r\nconst Creator = class\r\n{\r\n\r\n\r\n\t// ######################################################################################\tpublic methods\r\n\r\n\t/**\r\n\t * populates the puzzles rows and columns with random, solvable values\r\n\t *\r\n\t * @param {number} width\r\n\t * @param {number} height\r\n\t * @param {number|null} density - a floating point number between 0 and 1 (optional) that controls the percentage of filled cell likelihood.\r\n\t *                                    If not supplied a random value between 0.2 and 0.8 will be generated.\r\n\t *                                    Note that this does not make a puzzle grid filled in by the percentage,\r\n\t *                                    rather it's a 'suggestion' that is run through randomization on a cell-by-cell basis.\r\n\t * @returns {Puzzle|Puzzle|class}\r\n\t */\r\n\tcreateRandom( width, height, density )\r\n\t{\r\n\t\tconst start      = new Date().getTime();\r\n\t\tlet puzzleValid  = false,\r\n\t\t\tdensityValid = typeof density === 'number' && density >= 0 && density <= 1,\r\n\t\t\tcellsFilled, chanceOfCellFill, solutionGrid, rowArray, cellValue, solver, i, elapsed\r\n\t\t;\r\n\r\n\r\n\t\tthis.puzzle = new Puzzle( width, height );\r\n\t\tthis._reset();\r\n\r\n\r\n\t\twhile (puzzleValid === false) {\r\n\r\n\t\t\tchanceOfCellFill = densityValid ? density : Utility.getRandomIntBetween( 200, 800 ) / 1000;\r\n\t\t\tsolutionGrid     = [];\r\n\t\t\trowArray         = [];\r\n\t\t\tcellsFilled      = 0;\r\n\r\n\t\t\tthis._log( 'Creating random ' +\r\n\t\t\t\tthis.puzzle.width + 'x' + this.puzzle.height +\r\n\t\t\t\t' puzzle with density of ' + chanceOfCellFill + '...'\r\n\t\t\t);\r\n\r\n\t\t\t// create puzzle grid randomly using density as a factor\r\n\r\n\t\t\tfor (i = 0; i < this.puzzle.totalCells; i++) {\r\n\r\n\t\t\t\tcellValue = Math.random() < chanceOfCellFill ? 1 : 0;\r\n\r\n\t\t\t\tcellsFilled += cellValue;\r\n\r\n\t\t\t\tif (i % this.puzzle.width === 0 && i > 0) {\r\n\t\t\t\t\tsolutionGrid.push( rowArray );\r\n\t\t\t\t\trowArray = [];\r\n\t\t\t\t}\r\n\r\n\t\t\t\trowArray.push( cellValue );\r\n\t\t\t}\r\n\r\n\t\t\t// ensure that at least one cell is filled, and that not all of them are\r\n\r\n\t\t\tif (cellsFilled === 0) {\r\n\r\n\t\t\t\tthis._log( 'Generated puzzle has no cells filled.  Trying again...' );\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t} else if (cellsFilled === this.puzzle.totalCells) {\r\n\r\n\t\t\t\tthis._log( 'Generated puzzle has all cells filled.  Trying again...' );\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// populate the solution grid\r\n\t\t\tsolutionGrid.push( rowArray );\r\n\r\n\t\t\t// populate the grid\r\n\t\t\tthis.puzzle = Creator._populatePuzzleFromGrid( this.puzzle, solutionGrid );\r\n\r\n\r\n\t\t\t// ensure that puzzle is solvable\r\n\t\t\tsolver = new Solver( this.puzzle );\r\n\r\n\t\t\tif (solver.solve()) {\r\n\r\n\t\t\t\tpuzzleValid = true;\r\n\t\t\t\telapsed     = (new Date().getTime() - start) / 1000;\r\n\r\n\t\t\t\tthis._log( 'Puzzle is solvable - solved in ' + solver.elapsedTime + ' seconds' );\r\n\t\t\t\tthis._logLine();\r\n\t\t\t\tthis._log( 'Puzzle generated in ' + elapsed + ' seconds.' );\r\n\r\n\t\t\t\tthis.creationTime = elapsed;\r\n\t\t\t\tthis.solvingTime  = solver.elapsedTime;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._log( 'Puzzle cannot be solved.  Trying again...' );\r\n\t\t\t}\r\n\r\n\t\t\tthis._logLine();\r\n\t\t}\r\n\r\n\t\tthis.puzzle.creator = this;\r\n\r\n\t\treturn this.puzzle;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * - create a puzzle using a grid\r\n\t *\r\n\t * @param {array} grid - a multi-dimensional array representing rows and columns.\r\n\t *                         for example a 2x2 grid could be represented by [[0,1],[0,0]]\r\n\t * @throws - error if grid is invalid\r\n\t */\r\n\tcreateFromGrid( grid )\r\n\t{\r\n\t\tconst start = new Date();\r\n\t\tlet width   = 0,\r\n\t\t\theight  = 0,\r\n\t\t\tpuzzle, solver, elapsed\r\n\t\t;\r\n\r\n\t\tthis._reset();\r\n\r\n\t\tthis._log( 'creating puzzle from grid array.' );\r\n\r\n\t\t// make sure grid is valid and get width & height\r\n\t\tif (!(grid instanceof Array)) {\r\n\t\t\tthrow 'grid is not an array';\r\n\t\t}\r\n\r\n\r\n\t\tgrid.forEach( ( row, rowKey ) =>\r\n\t\t{\r\n\t\t\tif (!(row instanceof Array)) {\r\n\t\t\t\tthrow 'grid is not a multi-dimensional array';\r\n\t\t\t}\r\n\r\n\t\t\tif (width === 0) {\r\n\t\t\t\twidth = row.length;\r\n\t\t\t} else if (row.length !== width) {\r\n\t\t\t\tthrow 'row ' + rowKey + ' has an invalid length (' + row.length + ') - expecting ' + width;\r\n\t\t\t}\r\n\r\n\t\t\theight++;\r\n\t\t} );\r\n\r\n\t\tthis._log( 'grid is valid' );\r\n\t\tthis._log( 'populating ' + width + 'x' + height + ' puzzle' );\r\n\r\n\t\tpuzzle = new Puzzle( width, height );\r\n\r\n\t\tthis.puzzle         = Creator._populatePuzzleFromGrid( puzzle, grid );\r\n\t\tthis.puzzle.creator = this;\r\n\r\n\t\t// ensure that puzzle is solvable\r\n\r\n\t\tsolver = new Solver( this.puzzle );\r\n\r\n\r\n\t\tif (solver.solve()) {\r\n\r\n\t\t\tthis._log( 'Puzzle is solvable.' );\r\n\t\t\tthis._logLine();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis._log( 'Puzzle cannot be solved.' );\r\n\t\t\tthis._logLine();\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\telapsed = (new Date().getTime() - start) / 1000;\r\n\r\n\t\tthis._log( 'Puzzle built and solved in ' + elapsed + ' seconds.' );\r\n\t\tthis._logLine();\r\n\r\n\t\treturn this.puzzle;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * - create a puzzle from a hint object\r\n\t *\r\n\t * @param {object} hints - structured as follows:\r\n\t *                            {\r\n\t *\t\t\t\t\t\t\t\t\trow: [[3], [5], [5], [2, 3], [1, 5], [2, 1, 1], [2, 5], [1, 3]],\r\n\t *\t\t\t\t\t\t\t\t\tcolumn: [[1, 3], [4], [], [2, 3], [5, 2], [5, 2], [5, 2], [2, 3]]\r\n\t *\t\t\t\t\t\t\t  }\r\n\t * @param {array} hints.row\r\n\t * @param {array} hints.column\r\n\t * @throws - error if hints object is structured incorrectly\r\n\t */\r\n\tcreateFromHints( hints )\r\n\t{\r\n\t\tconst start = new Date();\r\n\t\tlet width, height, puzzle, solver, elapsed;\r\n\r\n\t\tthis._reset();\r\n\r\n\t\tthis._log( 'creating puzzle from hints' );\r\n\r\n\t\t// make sure row & column properties exist\r\n\r\n\t\tif (typeof hints !== 'object' || !hints.row || !hints.column) {\r\n\r\n\t\t\tthrow 'parameter passed to createFromHints() must be an object containing \"row\" and \"column\" properties';\r\n\r\n\t\t} else if (!(hints.row instanceof Array) || !(hints.column instanceof Array)) {\r\n\r\n\t\t\tthrow 'hints.row or hints.column must be an array.';\r\n\t\t}\r\n\t\t\r\n\t\tthis._log( 'found row and column hints' );\r\n\r\n\t\twidth              = hints.column.length;\r\n\t\theight             = hints.row.length;\r\n\t\tpuzzle             = new Puzzle( width, height );\r\n\t\tpuzzle.rowHints    = hints.row;\r\n\t\tpuzzle.columnHints = hints.column;\r\n\t\tpuzzle.creator     = this;\r\n\r\n\t\tthis._log( 'populating ' + width + 'x' + height + ' puzzle' );\r\n\r\n\r\n\t\t// populate cells array\r\n\r\n\t\tpuzzle.grid.forEach( ( row, rowKey ) =>\r\n\t\t{\r\n\t\t\trow.forEach( ( column, columnKey ) =>\r\n\t\t\t{\r\n\t\t\t\tpuzzle.cells.push( new PuzzleCell( {\r\n\t\t\t\t\tindex:  (rowKey * puzzle.width) + columnKey,\r\n\t\t\t\t\tcolumn: columnKey,\r\n\t\t\t\t\trow:    rowKey\r\n\t\t\t\t} ) );\r\n\t\t\t} );\r\n\t\t} );\r\n\r\n\t\tthis.puzzle = puzzle;\r\n\r\n\r\n\t\t// ensure that puzzle is solvable\r\n\r\n\t\tsolver = new Solver( this.puzzle );\r\n\r\n\r\n\t\tif (solver.solve()) {\r\n\r\n\t\t\tthis._log( 'Puzzle is solvable.' );\r\n\t\t\tthis._logLine();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis._log( 'Puzzle cannot be solved.' );\r\n\t\t\tthis._logLine();\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// set solution on puzzle cells\r\n\r\n\t\tsolver.puzzle.cells.forEach( ( solvedCell, cellIndex ) =>\r\n\t\t{\r\n\t\t\tconst puzzleCell = this.puzzle.getCellByIndex( cellIndex );\r\n\r\n\t\t\tpuzzleCell.aiSolution = solvedCell.aiSolution;\r\n\t\t\tpuzzleCell.solution   = solvedCell.aiSolution;\r\n\t\t} );\r\n\r\n\t\telapsed = (new Date().getTime() - start) / 1000;\r\n\r\n\t\tthis._log( 'Puzzle built and solved in ' + elapsed + ' seconds.' );\r\n\t\tthis._logLine();\r\n\r\n\t\treturn this.puzzle;\r\n\t}\r\n\r\n\r\n\t// ######################################################################################\tprivate methods\r\n\r\n\t/**\r\n\t *\r\n\t * @param {Puzzle} puzzle\r\n\t * @param {array} grid - a multidimensional array\r\n\t * @returns {Puzzle} puzzle\r\n\t * @private\r\n\t */\r\n\tstatic _populatePuzzleFromGrid( puzzle, grid )\r\n\t{\r\n\t\tlet columnHints, rowKey, row, columnKey, column, cell, currentVal, lastVal, rowHints, hintKey, hint;\r\n\r\n\t\tpuzzle.reset();\r\n\r\n\t\tpuzzle.grid = grid;\r\n\r\n\r\n\t\tfor (rowKey = 0; rowKey < puzzle.grid.length; rowKey++) {\r\n\r\n\t\t\trow      = puzzle.grid[rowKey];\r\n\t\t\trowHints = [];\r\n\r\n\t\t\tpuzzle.rowHints[rowKey] = [];\r\n\r\n\t\t\tfor (columnKey = 0; columnKey < row.length; columnKey++) {\r\n\r\n\t\t\t\tcolumn     = row[columnKey];\r\n\t\t\t\tcurrentVal = column;\r\n\t\t\t\tlastVal    = columnKey > 0 ? puzzle.grid[rowKey][columnKey - 1] : 0;\r\n\r\n\t\t\t\t// populate cells\r\n\r\n\t\t\t\tpuzzle.cells.push( new PuzzleCell( {\r\n\t\t\t\t\tindex:    (rowKey * puzzle.width) + columnKey,\r\n\t\t\t\t\tcolumn:   columnKey,\r\n\t\t\t\t\trow:      rowKey,\r\n\t\t\t\t\tsolution: column\r\n\t\t\t\t} ) );\r\n\r\n\t\t\t\t// populate row hints\r\n\r\n\t\t\t\tif (currentVal === 1 && lastVal === 0) {\r\n\t\t\t\t\trowHints.push( 1 );\r\n\t\t\t\t} else if (currentVal === 0 && lastVal === 1) {\r\n\t\t\t\t\trowHints.push( 0 );\r\n\t\t\t\t} else if (currentVal === 1 && lastVal === 1) {\r\n\t\t\t\t\trowHints[rowHints.length - 1]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// clean up row hints\r\n\r\n\t\t\tfor (hintKey = 0; hintKey < rowHints.length; hintKey++) {\r\n\r\n\t\t\t\thint = rowHints[hintKey];\r\n\r\n\t\t\t\tif (hint > 0) {\r\n\t\t\t\t\tpuzzle.rowHints[rowKey].push( hint );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// populate column hints\r\n\r\n\t\tfor (columnKey = 0; columnKey < puzzle.width; columnKey++) {\r\n\r\n\t\t\tpuzzle.columnHints[columnKey] = [];\r\n\t\t\tcolumnHints                   = [];\r\n\r\n\t\t\tfor (cell = columnKey; cell < puzzle.totalCells; cell += puzzle.width) {\r\n\r\n\t\t\t\trow        = Math.floor( cell / puzzle.width );\r\n\t\t\t\tcurrentVal = puzzle.grid[row][columnKey];\r\n\t\t\t\tlastVal    = row > 0 ? puzzle.grid[row - 1][columnKey] : 0;\r\n\r\n\t\t\t\tif (currentVal === 1 && lastVal === 0) {\r\n\t\t\t\t\tcolumnHints.push( 1 );\r\n\t\t\t\t} else if (currentVal === 0 && lastVal === 1) {\r\n\t\t\t\t\tcolumnHints.push( 0 );\r\n\t\t\t\t} else if (currentVal === 1 && lastVal === 1) {\r\n\t\t\t\t\tcolumnHints[columnHints.length - 1]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// clean up column hints\r\n\r\n\t\t\tfor (hintKey = 0; hintKey < columnHints.length; hintKey++) {\r\n\r\n\t\t\t\thint = columnHints[hintKey];\r\n\r\n\t\t\t\tif (hint > 0) {\r\n\t\t\t\t\tpuzzle.columnHints[columnKey].push( hint );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn puzzle;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param msg\r\n\t * @private\r\n\t */\r\n\t_log( msg )\r\n\t{\r\n\t\tthis.log.push( msg );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @private\r\n\t */\r\n\t_logLine()\r\n\t{\r\n\t\tthis.log.push( '-----------------------------------' );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @private\r\n\t */\r\n\t_reset()\r\n\t{\r\n\t\tthis.log          = [];\r\n\t\tthis.creationTime = 0;\r\n\t\tthis.solvingTime  = 0;\r\n\t}\r\n\r\n};\r\n\r\n","export {GuiTemplate};\r\n\r\n\r\n/**\r\n * @class\r\n * @type {GuiTemplate}\r\n * @this GuiTemplate\r\n *\r\n * @property {string} name\r\n * @property {string} path\r\n * @property {string} html\r\n * @property {array} loadedCallbacks\r\n * @property {Promise} loadedPromise - resolves once template has been loaded and parsed\r\n * @property {boolean} isLoaded\r\n */\r\nconst GuiTemplate = class\r\n{\r\n\t/**\r\n\t * class for loading an html template\r\n\t *\r\n\t * @param name\r\n\t * @param path\r\n\t */\r\n\tconstructor( name, path )\r\n\t{\r\n\t\tthis.name              = name;\r\n\t\tthis.path              = path;\r\n\t\tthis.html              = '';\r\n\t\tthis.onLoadedCallbacks = [];\r\n\t\tthis.isLoaded          = false;\r\n\t\tthis.loadedPromise     = null;\r\n\t}\r\n\r\n\r\n\t// noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * attach a callback to fire once template has loaded\r\n\t *\r\n\t * @param {function} callback\r\n\t */\r\n\tonLoad( callback )\r\n\t{\r\n\t\tthis.onLoadedCallbacks.push( callback );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * fired when template is loaded.  executes all onLoad callbacks\r\n\t */\r\n\tfireOnLoaded()\r\n\t{\r\n\t\tthis.onLoadedCallbacks.forEach( ( callback ) =>\r\n\t\t{\r\n\t\t\tcallback();\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * attempts to fetch a template specified by this.path\r\n\t *\r\n\t * @returns {Promise} - complete when template has been fetched and parsed\r\n\t * @throws - error if template cannot be loaded\r\n\t */\r\n\tload()\r\n\t{\r\n\t\tthis.loadedPromise = new Promise( ( resolve ) =>\r\n\t\t{\r\n\t\t\tfetch( this.path ).then( ( response ) =>\r\n\t\t\t{\r\n\t\t\t\tif (response.ok) {\r\n\r\n\t\t\t\t\tresponse.text().then( ( text ) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.html     = text;\r\n\t\t\t\t\t\tthis.isLoaded = true;\r\n\t\t\t\t\t\tthis.fireOnLoaded();\r\n\r\n\t\t\t\t\t\tresolve( this.name + ' loaded and parsed' );\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthrow 'loading failed for \"' + this.path + '\"';\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t} );\r\n\r\n\t\treturn this.loadedPromise;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * get the html template as a DOM node\r\n\t * @returns {HTMLDivElement}\r\n\t */\r\n\tgetNode()\r\n\t{\r\n\t\tconst div = document.createElement( 'div' );\r\n\r\n\t\tdiv.innerHTML = this.html;\r\n\r\n\t\treturn div;\r\n\t}\r\n\r\n};\r\n","export {PuzzleLibrary};\r\n\r\n\r\n/**\r\n *\r\n * @type {{'Large Example 1': {hints: {column: *[], row: *[]}, width: number, height: number}, 'Small Example 2': {hints: {column: *[], row: *[]}, width: number, height: number}, 'Medium Example 1': {hints: {column: *[], row: *[]}, width: number, height: number}, 'Small Example 1': {solutionGrid: *[], width: number, height: number}, 'Medium Example 2': {hints: {column: *[], row: *[]}, width: number, height: number}, 'Small Example 3': {hints: {column: *[], row: *[]}, width: number, height: number}}}\r\n */\r\nconst PuzzleLibrary = {\r\n\r\n\t\"Arnaud\": {\r\n\t\twidth:  26,\r\n\t\theight: 10,\r\n\t\thints:  {\r\n\t\t\trow:    [[5,5,5,5],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,5,4,4],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[5,1,1,1,5]],\r\n\t\t\tcolumn: [[10],[1,1],[1,1],[1,1],[1,1],[],[],[10],[1,1],[1,1],[1,1],[10],[],[],[10],[1,1],[1,1],[1,1],[1],[],[],[10],[1,1,1],[1,1,1],[1,1,1],[1,1]]\r\n\t\t}\r\n\t},\r\n\r\n\t\"Small Example 1\": {\r\n\t\twidth:        8,\r\n\t\theight:       8,\r\n\t\tsolutionGrid: [\r\n\t\t\t[0, 0, 0, 0, 1, 1, 1, 0],\r\n\t\t\t[0, 0, 0, 1, 1, 1, 1, 1],\r\n\t\t\t[0, 0, 0, 1, 1, 1, 1, 1],\r\n\t\t\t[1, 1, 0, 0, 1, 1, 1, 0],\r\n\t\t\t[0, 1, 0, 1, 1, 1, 1, 1],\r\n\t\t\t[1, 1, 0, 1, 0, 0, 0, 1],\r\n\t\t\t[1, 1, 0, 1, 1, 1, 1, 1],\r\n\t\t\t[1, 0, 0, 0, 1, 1, 1, 0]\r\n\t\t]\r\n\t},\r\n\r\n\t\"Small Example 2\": {\r\n\t\twidth:  8,\r\n\t\theight: 8,\r\n\t\thints:  {\r\n\t\t\trow:    [[3], [5], [5], [2, 3], [1, 5], [2, 1, 1], [2, 5], [1, 3]],\r\n\t\t\tcolumn: [[1, 3], [4], [], [2, 3], [5, 2], [5, 2], [5, 2], [2, 3]]\r\n\t\t}\r\n\t},\r\n\r\n\t\"Small Example 3\": {\r\n\t\twidth:  10,\r\n\t\theight: 10,\r\n\t\thints:  {\r\n\t\t\tcolumn: [\r\n\t\t\t\t[3], [1, 1], [1], [6], [8], [2, 1], [4, 1], [10], [3, 1], [3]\r\n\t\t\t],\r\n\t\t\trow:    [\r\n\t\t\t\t[4], [5], [2, 3], [2, 3], [2, 1], [2, 1], [2, 1], [10], [1, 1, 1], [2, 1, 1]\r\n\t\t\t]\r\n\t\t}\r\n\t},\r\n\r\n\t\"Medium Example 1\": {\r\n\t\twidth:  16,\r\n\t\theight: 18,\r\n\t\thints:  {\r\n\t\t\tcolumn: [\r\n\t\t\t\t[5], [4, 3, 3], [7, 6, 2], [4, 3, 4, 1], [3, 2, 4, 1, 2], [2, 6, 4], [3, 3, 1, 1], [4, 6, 4], [6, 4, 1, 1], [4, 3, 4, 1], [7, 6, 2], [4, 3, 3], [5], [3], [5, 3, 3], [2, 4, 1, 2]\r\n\t\t\t],\r\n\t\t\trow:    [\r\n\t\t\t\t[5], [9], [3, 5], [3, 5, 1], [4, 4, 2], [2, 1, 1, 2, 1], [2, 2, 1], [2, 3, 2, 1], [7, 2], [9, 1], [2, 2, 2, 2, 2], [3, 2, 2, 3, 2], [4, 1, 1, 6], [1, 2, 2, 2], [16], [2, 1, 1, 1, 1, 2, 1], [2, 2, 2, 2, 2], [9, 1]\r\n\t\t\t]\r\n\t\t}\r\n\t},\r\n\r\n\r\n\t\"Medium Example 2\": {\r\n\t\twidth:  15,\r\n\t\theight: 15,\r\n\t\thints:  {\r\n\t\t\tcolumn: [\r\n\t\t\t\t[4], [3, 1], [2, 3], [1, 2, 2], [1, 2, 1], [1, 1, 1, 1], [4, 3, 3], [2, 2, 4, 3], [1, 2, 5, 1], [1, 2, 4, 1], [1, 2, 5, 1], [2, 2, 4, 3], [9, 3], [5, 1, 1], [6, 1]\r\n\t\t\t],\r\n\t\t\trow:    [\r\n\t\t\t\t[4, 5], [3, 2, 2], [2, 1, 1], [1, 4, 3], [2, 9], [2, 8], [2, 3], [12], [1, 7, 1], [9], [5], [1, 1], [2, 2], [3, 3], [1, 7, 1]\r\n\t\t\t]\r\n\t\t}\r\n\t},\r\n\r\n\t\"Large Example 1\": {\r\n\t\twidth:  30,\r\n\t\theight: 30,\r\n\t\thints:  {\r\n\t\t\tcolumn: [\r\n\t\t\t\t[19, 9], [13, 1, 2, 1, 5], [11, 4, 1, 1, 2, 3], [10, 6, 1, 4, 1, 1], [9, 7, 1, 1, 3, 2], [3, 4, 11, 1, 6], [2, 1, 2, 3, 3, 3, 7], [2, 2, 1, 2, 4, 3, 8], [3, 2, 2, 1, 2, 6, 7], [1, 3, 3, 4, 1, 4, 4, 1], [5, 4, 2, 5, 2, 2], [1, 3, 11, 1, 2, 4], [3, 2, 14, 5], [2, 2, 1, 14, 7], [1, 2, 2, 2, 10, 2], [2, 1, 3, 2, 6, 3, 3], [5, 6, 6, 2, 2, 4], [6, 4, 4, 3, 3, 3], [6, 3, 2, 1, 1, 3, 5, 2], [6, 1, 2, 2, 2, 2, 2, 3], [7, 1, 9, 2, 4], [7, 3, 1, 2, 2, 3], [8, 2, 5, 4, 3], [6, 1, 7, 11], [5, 1, 3, 2, 12], [5, 2, 2, 2, 3, 11], [4, 5, 4, 3, 10], [3, 14, 10], [3, 3, 5, 2, 9], [4, 3, 3, 10]\r\n\t\t\t],\r\n\t\t\trow:    [\r\n\t\t\t\t[10, 19], [9, 1, 2, 15], [6, 1, 1, 1, 14], [5, 2, 3, 2, 11, 1], [6, 7, 11, 1], [7, 5, 7, 3], [8, 4, 3, 4], [6, 4, 5, 1, 4, 1], [5, 8, 6, 2, 1], [4, 10, 3, 3, 3, 1], [3, 3, 5, 2, 4, 2, 2], [2, 3, 3, 3, 2, 4, 2, 3], [2, 3, 1, 1, 5, 2, 1, 6], [1, 4, 3, 4, 2, 2, 2, 4], [1, 4, 3, 4, 5, 3, 3], [1, 5, 5, 2, 1, 4, 1, 1], [1, 15, 3, 2, 3, 1], [2, 4, 7, 2, 2, 3, 1], [1, 4, 4, 7, 2, 1, 3], [1, 2, 3, 4, 3, 3, 1], [1, 1, 3, 5, 2, 6, 1], [1, 1, 1, 4, 4, 9], [2, 3, 1, 1, 1, 9], [1, 2, 4, 1, 1, 6, 8], [1, 10, 1, 7, 7], [2, 8, 2, 1, 2, 1, 7], [3, 6, 3, 1, 1, 1, 7], [4, 4, 4, 3, 11], [3, 5, 20], [2, 7, 19]\r\n\t\t\t]\r\n\t\t}\r\n\t}\r\n};\r\n\r\n","import {GuiTemplate} from '../src/gui-template.js';\r\nimport {PuzzleLibrary} from '../src/puzzle-library.js';\r\nimport {Creator} from '../src/creator.js';\r\n\r\n\r\nexport {Gui};\r\n\r\n/**\r\n * @class\r\n * @type {Gui}\r\n * @this Gui\r\n *\r\n * provides a user interface for interacting with nonogram puzzles\r\n *\r\n * @property {Puzzle} puzzle\r\n * @property {HTMLElement} gridContainer - container element for the puzzle grid ui\r\n * @property {array} templates - array of GuiTemplate objects\r\n * @property {array} templatesLoaded - array of Promises from each loaded template\r\n * @property {string|null} theme - the theme to use, located in the themes/ directory\r\n * @property {string} themePath - the path to the specified theme located in themes/{theme}\r\n * @property {string} themeStylesheetPath - the path to the theme stylesheet located in themes/{theme}/styles.css\r\n * @property {string} themeTemplatesPath - the path to the theme template directory located in themes/{theme}/templates\r\n * @property {int} playerClickMode - whether to fill or cross a cell on click\r\n */\r\nconst Gui = class\r\n{\r\n\r\n\t/**\r\n\t *\r\n\t * @param {string|null} themePath - the path to the theme directory.  Defaults to ./themes/default\r\n\t */\r\n\tconstructor( themePath )\r\n\t{\r\n\t\tconst head = document.querySelector( 'head' ),\r\n\t\t\t  link = document.createElement( 'link' )\r\n\t\t;\r\n\r\n\t\t// set up board sizes\r\n\t\tthis.boardSizes = [\r\n\t\t\t{ name: 'Tiny', handle: 'tiny', size: 1 },\r\n\t\t\t{ name: 'Small', handle: 'small', size: 2 },\r\n\t\t\t{ name: 'Medium', handle: 'medium', size: 3 },\r\n\t\t\t{ name: 'Large', handle: 'large', size: 4 },\r\n\t\t];\r\n\t\tthis.boardSize  = this.boardSizes[2];\r\n\r\n\t\t// set up theme\r\n\t\tthis.themePath = themePath || './themes/default';\r\n\r\n\t\t// load theme stylesheet\r\n\t\tthis.themeStylesheetPath = this.themePath + '/styles.css';\r\n\t\tlink.rel                 = 'stylesheet';\r\n\t\tlink.type                = 'text/css';\r\n\t\tlink.href                = this.themeStylesheetPath;\r\n\t\thead.prepend( link );\r\n\r\n\t\t// set up templates\r\n\t\tthis.templatesLoaded    = [];\r\n\t\tthis.themeTemplatesPath = this.themePath + '/templates';\r\n\t\tthis.templates          = [\r\n\t\t\tnew GuiTemplate( 'gameControls', this.themeTemplatesPath + '/controls-game.html' ),\r\n\t\t\tnew GuiTemplate( 'generateControls', this.themeTemplatesPath + '/controls-generate.html' ),\r\n\t\t\tnew GuiTemplate( 'console', this.themeTemplatesPath + '/console.html' ),\r\n\t\t\tnew GuiTemplate( 'previewGrid', this.themeTemplatesPath + '/preview-grid.html' ),\r\n\t\t\tnew GuiTemplate( 'puzzleGrid', this.themeTemplatesPath + '/puzzle-grid.html' ),\r\n\t\t];\r\n\r\n\t\t// load templates\r\n\t\tthis.templates.forEach( ( template ) =>\r\n\t\t{\r\n\t\t\tthis.templatesLoaded.push(\r\n\t\t\t\ttemplate.load()\r\n\t\t\t);\r\n\t\t} );\r\n\r\n\t\t// a set of selected cells while maintaining mousedown\r\n\t\tthis.mouseDown = false;\r\n\t\tthis.selection = new Set();\r\n\t}\r\n\r\n\r\n\t// ######################################################################################\tpublic drawing methods\r\n\r\n\t/**\r\n\t * - draw all user interfaces once templates are loaded\r\n\t */\r\n\tdraw( puzzle )\r\n\t{\r\n\t\tthis.puzzle = puzzle;\r\n\r\n\t\tPromise.all( this.templatesLoaded ).then( () =>\r\n\t\t{\r\n\t\t\tthis.drawGenerateControls();\r\n\t\t\tthis.drawPuzzle( puzzle );\r\n\t\t\tthis.drawGameControls();\r\n\t\t\tthis.drawConsole();\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * - draw the puzzle ui\r\n\t *\r\n\t * @param {Puzzle} puzzle\r\n\t */\r\n\tdrawPuzzle( puzzle )\r\n\t{\r\n\t\tPromise.all( this.templatesLoaded ).then( () =>\r\n\t\t{\r\n\t\t\tconst template = this._getTemplate( 'puzzleGrid' );\r\n\r\n\t\t\tthis.puzzle        = puzzle;\r\n\t\t\tthis.gridContainer = document.querySelector( '[data-nonogram-puzzle-grid]' );\r\n\r\n\r\n\t\t\tif (!this.gridContainer) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst container       = this.gridContainer,\r\n\t\t\t\t  node            = template.getNode(),\r\n\t\t\t\t  theadThTemplate = node.querySelector( '[data-nonogram-puzzle-grid-table-thead-th]' ),\r\n\t\t\t\t  rowTemplate     = node.querySelector( '[data-nonogram-puzzle-grid-table-row]' ),\r\n\t\t\t\t  cellClasses     = {\r\n\t\t\t\t\t  tl: 0,\r\n\t\t\t\t\t  tr: this.puzzle.width - 1,\r\n\t\t\t\t\t  bl: (this.puzzle.width * this.puzzle.height) - this.puzzle.width,\r\n\t\t\t\t\t  br: (this.puzzle.width * this.puzzle.height) - 1,\r\n\t\t\t\t  }\r\n\t\t\t;\r\n\r\n\t\t\t// table header\r\n\t\t\tthis.puzzle.columnHints.forEach( ( hints, columnIndex ) =>\r\n\t\t\t{\r\n\t\t\t\tconst clonedTheadThTemplate = document.importNode( theadThTemplate.content, true ),\r\n\t\t\t\t\t  theadTh               = clonedTheadThTemplate.querySelector( 'th' ),\r\n\t\t\t\t\t  fillDiv               = theadTh.querySelector( '.fill' );\r\n\r\n\t\t\t\ttheadTh.setAttribute( 'data-column', columnIndex.toString() );\r\n\t\t\t\ttheadTh.classList.add( 'hint', 'top' );\r\n\r\n\t\t\t\t// add hints\r\n\t\t\t\thints.forEach( ( hint ) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tlet span = document.createElement( 'span' );\r\n\r\n\t\t\t\t\tspan.textContent = hint;\r\n\t\t\t\t\tfillDiv.appendChild( span );\r\n\t\t\t\t} );\r\n\r\n\t\t\t\ttheadThTemplate.parentNode.insertBefore( theadTh, theadThTemplate );\r\n\t\t\t} );\r\n\r\n\r\n\t\t\t// table rows\r\n\r\n\t\t\tthis.puzzle.grid.forEach( ( row, rowKey ) =>\r\n\t\t\t{\r\n\t\t\t\tconst cells             = this.puzzle.getRowCells( rowKey ),\r\n\t\t\t\t\t  clonedRowTemplate = document.importNode( rowTemplate.content, true ),\r\n\t\t\t\t\t  tr                = clonedRowTemplate.querySelector( 'tr' ),\r\n\t\t\t\t\t  cellTemplate      = tr.querySelector( '[data-nonogram-puzzle-grid-table-cell]' ),\r\n\t\t\t\t\t  hintsFillDiv      = tr.querySelector( '[data-row-hints] .fill' )\r\n\t\t\t\t;\r\n\r\n\t\t\t\ttr.setAttribute( 'data-row', rowKey.toString() );\r\n\r\n\t\t\t\t// hint cell\r\n\t\t\t\tthis.puzzle.rowHints[rowKey].forEach( ( hint ) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tlet span = document.createElement( 'span' );\r\n\r\n\t\t\t\t\tspan.textContent = hint;\r\n\t\t\t\t\thintsFillDiv.appendChild( span );\r\n\t\t\t\t} );\r\n\r\n\t\t\t\t// grid cells\r\n\t\t\t\tcells.forEach( ( cell ) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tconst clonedCellTemplate = document.importNode( cellTemplate.content, true ),\r\n\t\t\t\t\t\t  td                 = clonedCellTemplate.querySelector( 'td' )\r\n\t\t\t\t\t;\r\n\r\n\t\t\t\t\ttd.setAttribute( 'data-index', cell.index );\r\n\t\t\t\t\ttd.setAttribute( 'data-column', cell.column );\r\n\t\t\t\t\ttd.setAttribute( 'data-row', cell.row );\r\n\t\t\t\t\ttd.classList.add( 'puzzle-cell', 'flippable' );\r\n\r\n\t\t\t\t\tObject.keys( cellClasses ).forEach( ( cssClass ) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (cell.index === cellClasses[cssClass]) {\r\n\t\t\t\t\t\t\ttd.classList.add( cssClass );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\ttr.appendChild( td );\r\n\t\t\t\t} );\r\n\r\n\t\t\t\trowTemplate.parentNode.appendChild( tr );\r\n\t\t\t} );\r\n\r\n\r\n\t\t\t// insert template\r\n\t\t\tcontainer.innerHtml = container.textContent = '';\r\n\t\t\tcontainer.appendChild( node );\r\n\r\n\t\t\t// set board size\r\n\t\t\tdocument.querySelector( '[data-nonogram-puzzle-grid-table]' ).classList.add( this.boardSize.handle );\r\n\r\n\t\t\tthis._resizeBoardForAvailableScreen();\r\n\t\t\tthis._makePuzzlePlayable();\r\n\t\t\tthis.drawPreview( 'userSolution' );\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *    - draw the game controls ui\r\n\t */\r\n\tdrawGameControls()\r\n\t{\r\n\t\tPromise.all( this.templatesLoaded ).then( () =>\r\n\t\t{\r\n\t\t\tconst template  = this._getTemplate( 'gameControls' ),\r\n\t\t\t\t  container = document.querySelector( '[data-nonogram-game-controls]' ),\r\n\t\t\t\t  node      = template.getNode()\r\n\t\t\t;\r\n\t\t\tlet fillModeCheckbox;\r\n\r\n\r\n\t\t\tif (!container) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// insert template\r\n\t\t\tcontainer.innerHtml = container.textContent = '';\r\n\t\t\tcontainer.appendChild( node );\r\n\r\n\t\t\t// add event handlers\r\n\t\t\tfillModeCheckbox = document.querySelector( '#nonogram-puzzle-fill-mode' );\r\n\r\n\t\t\tfillModeCheckbox.addEventListener( 'change', () =>\r\n\t\t\t{\r\n\t\t\t\tconst fillModeLabel = document.querySelector( '[for=\"nonogram-puzzle-fill-mode\"]' ),\r\n\t\t\t\t\t  prevActive    = fillModeLabel.querySelector( '.active' ),\r\n\t\t\t\t\t  prevInactive  = fillModeLabel.querySelector( '.inactive' )\r\n\t\t\t\t;\r\n\r\n\t\t\t\tprevActive.classList.remove( 'active' );\r\n\t\t\t\tprevActive.classList.add( 'inactive' );\r\n\t\t\t\tprevInactive.classList.remove( 'inactive' );\r\n\t\t\t\tprevInactive.classList.add( 'active' );\r\n\r\n\t\t\t\tif (fillModeCheckbox.checked) {\r\n\t\t\t\t\tfillModeLabel.classList.add( 'on' );\r\n\t\t\t\t\tthis.playerClickMode = 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfillModeLabel.classList.remove( 'on' );\r\n\t\t\t\t\tthis.playerClickMode = 1;\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\r\n\t\t\twindow.removeEventListener( 'keyup', Gui._keypressCallback );\r\n\t\t\twindow.addEventListener( 'keyup', Gui._keypressCallback );\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * - draw puzzle generating/solving/resetting ui\r\n\t */\r\n\tdrawGenerateControls()\r\n\t{\r\n\t\tPromise.all( this.templatesLoaded ).then( () =>\r\n\t\t{\r\n\t\t\tconst template            = this._getTemplate( 'generateControls' ),\r\n\t\t\t\t  container           = document.querySelector( '[data-nonogram-generate-controls]' ),\r\n\t\t\t\t  node                = template.getNode(),\r\n\t\t\t\t  widthSelect         = node.querySelector( '[data-nonogram-generate-width]' ),\r\n\t\t\t\t  heightSelect        = node.querySelector( '[data-nonogram-generate-height]' ),\r\n\t\t\t\t  widthOptions        = node.querySelector( '[data-nonogram-generate-width-options]' ),\r\n\t\t\t\t  heightOptions       = node.querySelector( '[data-nonogram-generate-height-options]' ),\r\n\t\t\t\t  chooseExampleSelect = node.querySelector( '[data-nonogram-choose-predefined]' ),\r\n\t\t\t\t  boardSizeSelect     = node.querySelector( '[data-nonogram-board-size]' ),\r\n\t\t\t\t  boardSizeOptions    = node.querySelector( '[data-nonogram-board-size-options]' )\r\n\t\t\t;\r\n\t\t\tlet i, clonedWidthOptions, cloneHeightOptions, widthOption, heightOption, clonedExampleOptions,\r\n\t\t\t\texampleOption, chooseSelect, boardSize, clonedSizeOptions, sizeOption, reset, solve, generate;\r\n\r\n\r\n\t\t\tif (!container) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// populate width/height select elements\r\n\t\t\tfor (i = 5; i <= 30; i++) {\r\n\r\n\t\t\t\tclonedWidthOptions       = document.importNode( widthOptions.content, true );\r\n\t\t\t\tcloneHeightOptions       = document.importNode( heightOptions.content, true );\r\n\t\t\t\twidthOption              = clonedWidthOptions.querySelector( 'option' );\r\n\t\t\t\twidthOption.textContent  = widthOption.value = i;\r\n\t\t\t\theightOption             = cloneHeightOptions.querySelector( 'option' );\r\n\t\t\t\theightOption.textContent = heightOption.value = i;\r\n\r\n\t\t\t\tif (this.puzzle.width === i) {\r\n\t\t\t\t\twidthOption.setAttribute( 'selected', 'selected' );\r\n\t\t\t\t}\r\n\t\t\t\tif (this.puzzle.height === i) {\r\n\t\t\t\t\theightOption.setAttribute( 'selected', 'selected' );\r\n\t\t\t\t}\r\n\r\n\t\t\t\twidthSelect.appendChild( widthOption );\r\n\t\t\t\theightSelect.appendChild( heightOption );\r\n\t\t\t}\r\n\r\n\t\t\t// populate predefined puzzles\r\n\r\n\t\t\tObject.keys( PuzzleLibrary ).forEach( ( puzzleName ) =>\r\n\t\t\t{\r\n\t\t\t\tclonedExampleOptions = document.importNode( widthOptions.content, true );\r\n\t\t\t\texampleOption        = clonedExampleOptions.querySelector( 'option' );\r\n\r\n\t\t\t\texampleOption.textContent = exampleOption.value = puzzleName;\r\n\r\n\t\t\t\tif (puzzleName === this.selectedExample) {\r\n\t\t\t\t\texampleOption.setAttribute( 'selected', 'selected' );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tchooseExampleSelect.appendChild( exampleOption );\r\n\t\t\t} );\r\n\r\n\t\t\t// populate board size\r\n\t\t\tthis.boardSizes.forEach( ( sizeObj ) =>\r\n\t\t\t{\r\n\t\t\t\tclonedSizeOptions = document.importNode( boardSizeOptions.content, true );\r\n\t\t\t\tsizeOption        = clonedSizeOptions.querySelector( 'option' );\r\n\r\n\t\t\t\tsizeOption.value       = sizeObj.handle;\r\n\t\t\t\tsizeOption.textContent = sizeObj.name;\r\n\r\n\r\n\t\t\t\tif (sizeObj.handle === this.boardSize.handle) {\r\n\t\t\t\t\tsizeOption.setAttribute( 'selected', 'selected' );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tboardSizeSelect.appendChild( sizeOption );\r\n\t\t\t} );\r\n\r\n\t\t\t// insert template\r\n\t\t\tcontainer.innerHtml = container.textContent = '';\r\n\t\t\tcontainer.appendChild( node );\r\n\r\n\t\t\t// add event handlers\r\n\t\t\tgenerate     = document.querySelector( '[data-nonogram-generate-button]' );\r\n\t\t\tchooseSelect = document.querySelector( '[data-nonogram-choose-predefined]' );\r\n\t\t\tboardSize    = document.querySelector( '[data-nonogram-board-size]' );\r\n\t\t\treset        = document.querySelector( '[data-nonogram-game-reset]' );\r\n\t\t\tsolve        = document.querySelector( '[data-nonogram-game-solve]' );\r\n\r\n\t\t\tgenerate.addEventListener( 'click', () =>\r\n\t\t\t{\r\n\t\t\t\tconst widthSelect    = document.querySelector( '[data-nonogram-generate-width]' ),\r\n\t\t\t\t\t  heightSelect   = document.querySelector( '[data-nonogram-generate-height]' ),\r\n\t\t\t\t\t  width          = widthSelect.value,\r\n\t\t\t\t\t  height         = heightSelect.value,\r\n\t\t\t\t\t  creator        = new Creator(),\r\n\t\t\t\t\t  puzzle         = creator.createRandom( width, height, null )\r\n\t\t\t\t;\r\n\t\t\t\tthis.selectedExample = null;\r\n\t\t\t\tthis.draw( puzzle );\r\n\t\t\t\tthis._resizeBoardForAvailableScreen();\r\n\t\t\t} );\r\n\r\n\t\t\tchooseSelect.addEventListener( 'change', () =>\r\n\t\t\t{\r\n\t\t\t\tconst creator = new Creator();\r\n\t\t\t\tlet puzzleDef, puzzle;\r\n\r\n\t\t\t\tif (chooseSelect.value !== '') {\r\n\t\t\t\t\tObject.keys( PuzzleLibrary ).forEach( ( puzzleName ) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (chooseSelect.value === puzzleName) {\r\n\r\n\t\t\t\t\t\t\tpuzzleDef            = PuzzleLibrary[puzzleName];\r\n\t\t\t\t\t\t\tthis.selectedExample = puzzleName;\r\n\r\n\t\t\t\t\t\t\tif (puzzleDef.solutionGrid) {\r\n\t\t\t\t\t\t\t\tpuzzle = creator.createFromGrid( puzzleDef.solutionGrid );\r\n\t\t\t\t\t\t\t} else if (puzzleDef.hints) {\r\n\t\t\t\t\t\t\t\tpuzzle = creator.createFromHints( puzzleDef.hints );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\tif (puzzle) {\r\n\t\t\t\t\t\tthis.draw( puzzle );\r\n\t\t\t\t\t\tthis._resizeBoardForAvailableScreen();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\r\n\t\t\tboardSize.addEventListener( 'change', () =>\r\n\t\t\t{\r\n\t\t\t\tthis.boardSizes.forEach( ( item ) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif (item.handle === boardSize.value) {\r\n\t\t\t\t\t\tthis._changeBoardSize( item );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t} );\r\n\r\n\t\t\treset.addEventListener( 'click', () =>\r\n\t\t\t{\r\n\t\t\t\tthis._resetPuzzle();\r\n\t\t\t} );\r\n\r\n\t\t\tsolve.addEventListener( 'click', () =>\r\n\t\t\t{\r\n\t\t\t\tthis.drawSolution();\r\n\t\t\t\tthis.drawPreview( 'solution' );\r\n\t\t\t\tthis._showPuzzleSolved();\r\n\t\t\t} );\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * - draw the console and populate with Creator _log\r\n\t */\r\n\tdrawConsole()\r\n\t{\r\n\t\tPromise.all( this.templatesLoaded ).then( () =>\r\n\t\t{\r\n\t\t\tconst template  = this._getTemplate( 'console' ),\r\n\t\t\t\t  container = document.querySelector( '[data-nonogram-console]' ),\r\n\t\t\t\t  node      = template.getNode(),\r\n\t\t\t\t  output    = node.querySelector( '[data-nonogram-console-output]' ),\r\n\t\t\t\t  line      = node.querySelector( '[data-nonogram-console-line]' )\r\n\t\t\t;\r\n\r\n\t\t\tif (!container) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.puzzle.creator instanceof Creator) {\r\n\t\t\t\tthis.puzzle.creator.log.forEach( ( text ) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tconst clonedLine = document.importNode( line.content, true ),\r\n\t\t\t\t\t\t  code       = clonedLine.querySelector( 'code' );\r\n\r\n\t\t\t\t\tcode.textContent = text.toString();\r\n\t\t\t\t\toutput.appendChild( code );\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\r\n\t\t\t// insert template\r\n\t\t\tcontainer.innerHtml = container.textContent = '';\r\n\t\t\tcontainer.appendChild( node );\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * - draw the preview grid for the current state of the puzzle\r\n\t *\r\n\t * @param solutionType\r\n\t */\r\n\tdrawPreview( solutionType )\r\n\t{\r\n\t\tPromise.all( this.templatesLoaded ).then( () =>\r\n\t\t{\r\n\t\t\tconst template  = this._getTemplate( 'previewGrid' ),\r\n\t\t\t\t  container = document.querySelector( '[data-nonogram-preview-grid]' ),\r\n\t\t\t\t  node      = template.getNode()\r\n\t\t\t;\r\n\r\n\t\t\t// insert template\r\n\r\n\t\t\tcontainer.innerHtml = container.textContent = '';\r\n\t\t\tcontainer.appendChild( node.querySelector( '[data-nonogram-preview]' ) );\r\n\r\n\r\n\t\t\t// draw preview canvas\r\n\r\n\t\t\tconst canvas          = document.querySelector( '[data-nonogram-preview-canvas]' ),\r\n\t\t\t\t  ctx             = canvas.getContext( '2d' ),\r\n\t\t\t\t  parentContainer = canvas.parentElement.parentElement.parentElement,\r\n\t\t\t\t  parentWidth     = parentContainer.offsetWidth,\r\n\t\t\t\t  parentHeight    = parentContainer.offsetHeight,\r\n\t\t\t\t  containerRatio  = parentWidth / parentHeight,\r\n\t\t\t\t  puzzleRatio     = this.puzzle.width / this.puzzle.height\r\n\t\t\t;\r\n\t\t\tlet cellSize;\r\n\r\n\t\t\tif (containerRatio > puzzleRatio) {\r\n\t\t\t\tcellSize = Math.floor( parentHeight / this.puzzle.height );\r\n\t\t\t} else {\r\n\t\t\t\tcellSize = Math.floor( parentWidth / this.puzzle.width );\r\n\t\t\t}\r\n\r\n\t\t\tcanvas.width  = cellSize * this.puzzle.width;\r\n\t\t\tcanvas.height = cellSize * this.puzzle.height;\r\n\r\n\t\t\tthis.puzzle.cells.forEach( ( cell ) =>\r\n\t\t\t{\r\n\t\t\t\tif (cell[solutionType] === 1) {\r\n\t\t\t\t\tctx.fillRect( cell.column * cellSize, cell.row * cellSize, cellSize, cellSize );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * - draw the solution to the current puzzle\r\n\t */\r\n\tdrawSolution()\r\n\t{\r\n\t\tPromise.all( this.templatesLoaded ).then( () =>\r\n\t\t{\r\n\t\t\tconst filledTds = this.gridContainer.querySelectorAll( 'td.filled' );\r\n\r\n\r\n\t\t\tfilledTds.forEach( ( td ) =>\r\n\t\t\t{\r\n\t\t\t\ttd.classList.remove( 'filled', 'solution-positive', 'solution-negative', 'user-positive', 'user-negative', 'flipped' );\r\n\t\t\t} );\r\n\r\n\t\t\tthis.puzzle.cells.forEach( ( cell ) =>\r\n\t\t\t{\r\n\t\t\t\tconst cellElem = this.gridContainer.querySelector( 'td[data-index=\"' + cell.index + '\"]' );\r\n\r\n\t\t\t\tcell.userSolution = cell.solution;\r\n\t\t\t\tcellElem.classList.add( 'user-solved' );\r\n\r\n\t\t\t\tif (cell.solution === 1) {\r\n\t\t\t\t\tcellElem.classList.add( 'solution-positive', 'user-positive', 'flipped' );\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcellElem.classList.add( 'solution-negative', 'user-negative' );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t// ######################################################################################\tprivate methods\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param {object} boardSize\r\n\t * @private\r\n\t */\r\n\t_changeBoardSize( boardSize )\r\n\t{\r\n\t\tconst puzzleTable = document.querySelector( '[data-nonogram-puzzle-grid-table]' ),\r\n\t\t\t  sizeSelect  = document.querySelector( '[data-nonogram-board-size]' )\r\n\t\t;\r\n\r\n\t\tif (puzzleTable && sizeSelect) {\r\n\r\n\t\t\tpuzzleTable.classList.remove( 'tiny', 'small', 'medium', 'large' );\r\n\t\t\tpuzzleTable.classList.add( boardSize.handle );\r\n\t\t\tsizeSelect.value = boardSize.handle;\r\n\r\n\t\t\tthis.boardSize = boardSize;\r\n\r\n\t\t\tthis.drawPreview();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @private\r\n\t */\r\n\t_resizeBoardForAvailableScreen()\r\n\t{\r\n\t\tconst table            = this.gridContainer.querySelector( '.nonogram-puzzle-grid' ),\r\n\t\t\t  availableWidth   = this.gridContainer.clientWidth,\r\n\t\t\t  sortedBoardSizes = this.boardSizes.sort( ( a, b ) =>\r\n\t\t\t  {\r\n\t\t\t\t  return a.size > b.size ? -1 : 1;\r\n\t\t\t  } )\r\n\t\t;\r\n\t\tlet i;\r\n\r\n\r\n\t\tif (table.clientWidth > availableWidth) {\r\n\r\n\t\t\tfor (i = 0; i < sortedBoardSizes.length; i++) {\r\n\r\n\t\t\t\tif (sortedBoardSizes[i].size < this.boardSize.size) {\r\n\r\n\t\t\t\t\tthis._changeBoardSize( sortedBoardSizes[i] );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (table.clientWidth <= availableWidth) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.drawConsole();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @private\r\n\t */\r\n\t_makePuzzlePlayable()\r\n\t{\r\n\t\tconst table    = this.gridContainer.querySelector( '.nonogram-puzzle-grid' ),\r\n\t\t\t  cells    = this.gridContainer.querySelectorAll( '.nonogram-puzzle-grid td.puzzle-cell' ),\r\n\t\t\t  allCells = this.gridContainer.querySelectorAll( '.nonogram-puzzle-grid td' )\r\n\t\t;\r\n\r\n\t\tthis.playerClickMode = 1;\r\n\r\n\t\t// set css classes and event handlers for puzzle cells\r\n\r\n\t\tcells.forEach( ( cellElem ) =>\r\n\t\t{\r\n\t\t\tcellElem.classList.add( 'playable' );\r\n\r\n\t\t\t// highlight row/column on mouse hover\r\n\r\n\t\t\tcellElem.addEventListener( 'mouseenter', ( e ) =>\r\n\t\t\t{\r\n\t\t\t\tconsole.log('mouse ENTER!');\r\n\t\t\t\tconst hoverCell = e.currentTarget,\r\n\t\t\t\t\t  row       = hoverCell.getAttribute( 'data-row' ),\r\n\t\t\t\t\t  column    = hoverCell.getAttribute( 'data-column' )\r\n\t\t\t\t;\r\n\t\t\t\tconst cellRef = `${column},${row}`;\r\n\r\n\t\t\t\tallCells.forEach( ( cellElem ) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tconst actualCellRow    = cellElem.getAttribute( 'data-row' ),\r\n\t\t\t\t\t      actualCellColumn = cellElem.getAttribute( 'data-column' )\r\n\t\t\t\t\t;\r\n\r\n\t\t\t\t\tif ( actualCellRow === row || actualCellColumn === column ) {\r\n\t\t\t\t\t\tcellElem.classList.add( 'row-column-highlight' );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcellElem.classList.remove( 'row-column-highlight' );\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( this.mouseDown\r\n\t\t\t\t\t\t&& actualCellRow === row\r\n\t\t\t\t\t\t&& actualCellColumn === column\r\n\t\t\t\t\t\t&& !this.selection.has(cellRef) )\r\n\t\t\t\t    {\r\n\t\t\t\t\t   this.selection.add(cellRef);\r\n\t\t\t\t\t   cellElem.click();\r\n\t\t\t\t    }\r\n\r\n\t\t\t\t} );\r\n\t\t\t} );\r\n\r\n\t\t\t// add cell click event handler\r\n\r\n\t\t\tcellElem.addEventListener( 'click', ( e ) =>\r\n\t\t\t{\r\n\t\t\t\tconsole.log('CLICK!');\r\n\t\t\t\tconst cellElem  = e.currentTarget,\r\n\t\t\t\t\t  cellIndex = cellElem.getAttribute( 'data-index' ),\r\n\t\t\t\t\t  cell      = this.puzzle.getCellByIndex( cellIndex ),\r\n\t\t\t\t\t  solvedP   = document.querySelector( '[data-nonogram-puzzle-grid-solved]' )\r\n\t\t\t\t;\r\n\r\n\t\t\t\te.preventDefault();\r\n\r\n\t\t\t\tcell.userSolution = cell.userSolution === this.playerClickMode ? null : this.playerClickMode;\r\n\r\n\t\t\t\ttable.classList.remove( 'solved' );\r\n\t\t\t\tcellElem.classList.remove( 'user-solved', 'user-positive', 'user-negative', 'solution-positive', 'solution-negative' );\r\n\r\n\t\t\t\tif (cell.userSolution === 1) {\r\n\t\t\t\t\tcellElem.classList.add( 'user-solved', 'user-positive' );\r\n\t\t\t\t} else if (cell.userSolution === 0) {\r\n\t\t\t\t\tcellElem.classList.add( 'user-solved', 'user-negative' );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcellElem.classList.toggle( 'flipped' );\r\n\r\n\t\t\t\tthis.drawPreview( 'userSolution' );\r\n\r\n\t\t\t\tif (this.puzzle.checkUserSolution()) {\r\n\t\t\t\t\tthis._showPuzzleSolved();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsolvedP.textContent = '';\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t} );\r\n\r\n\t\t// remove highlighted cells on puzzle grid mouseout\r\n\r\n\t\ttable.addEventListener( 'mouseleave', () =>\r\n\t\t{\r\n\t\t\tconsole.log('mouseleave!');\r\n\t\t\tallCells.forEach( ( cellElem ) =>\r\n\t\t\t{\r\n\t\t\t\tcellElem.classList.remove( 'row-column-highlight' );\r\n\t\t\t} );\r\n\t\t} );\r\n\r\n\t\ttable.addEventListener( 'mousedown', ( e ) =>\r\n\t\t{\r\n\t\t\tconsole.log('mouse DOWN!');\r\n\t\t\tthis.mouseDown = true;\r\n\t\t\te.currentTarget.click();\r\n\t\t});\r\n\r\n\t\ttable.addEventListener( 'mouseup', ( e ) =>\r\n\t\t{\r\n\t\t\te.preventDefault();\r\n\t\t\tconsole.log('mouse UP!');\r\n\t\t\tthis.selection.clear();\r\n\t\t\tthis.mouseDown = false;\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @private\r\n\t */\r\n\t_resetPuzzle()\r\n\t{\r\n\t\tconst cellElements = this.gridContainer.querySelectorAll( '.nonogram-puzzle-grid td.puzzle-cell' ),\r\n\t\t\t  puzzleGrid   = this.gridContainer.querySelector( '.nonogram-puzzle-grid' ),\r\n\t\t\t  solvedP      = document.querySelector( '[data-nonogram-puzzle-grid-solved]' )\r\n\t\t;\r\n\r\n\t\tpuzzleGrid.classList.remove( 'solved' );\r\n\t\tsolvedP.textContent = '';\r\n\r\n\t\tthis.puzzle.cells.forEach( ( cell ) =>\r\n\t\t{\r\n\t\t\tcell.userSolution = null;\r\n\t\t} );\r\n\r\n\t\tcellElements.forEach( ( cellElem ) =>\r\n\t\t{\r\n\t\t\tcellElem.classList.remove( 'user-solved', 'user-positive', 'user-negative', 'solution-positive', 'solution-negative' );\r\n\t\t} );\r\n\r\n\t\tthis.gridContainer.querySelector( '[data-nonogram-preview-grid]' ).innerHTML = '';\r\n\r\n\t\tthis.drawPreview( 'userSolution' );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @private\r\n\t */\r\n\t_showPuzzleSolved()\r\n\t{\r\n\t\tconst grid       = this.gridContainer.querySelector( '.nonogram-puzzle-grid' ),\r\n\t\t\t  tableCells = document.querySelectorAll( '[data-nonogram-puzzle-grid-table] .puzzle-cell' ),\r\n\t\t\t  solvedP    = document.querySelector( '[data-nonogram-puzzle-grid-solved]' )\r\n\t\t;\r\n\r\n\t\ttableCells.forEach( ( cellElem ) =>\r\n\t\t{\r\n\t\t\tcellElem.classList.remove( 'row-column-highlight' )\r\n\t\t} );\r\n\r\n\t\tgrid.classList.add( 'solved' );\r\n\t\tsolvedP.textContent = 'Solved!';\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param name\r\n\t * @returns {GuiTemplate}\r\n\t * @throws - error if template could not be found\r\n\t * @private\r\n\t */\r\n\t_getTemplate( name )\r\n\t{\r\n\t\tconst ret = this.templates.find( ( template ) =>\r\n\t\t{\r\n\t\t\treturn template.name === name;\r\n\t\t} );\r\n\r\n\t\tif (!(ret instanceof GuiTemplate)) {\r\n\t\t\tthrow '\"' + name + '\" template not found.';\r\n\t\t}\r\n\r\n\t\treturn ret;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * handle window keypress events\r\n\t *\r\n\t * @param {KeyboardEvent} e\r\n\t * @private\r\n\t */\r\n\tstatic _keypressCallback( e )\r\n\t{\r\n\t\tif (e.key && e.key === 'x') {\r\n\t\t\tdocument.querySelector( '#nonogram-puzzle-fill-mode' ).dispatchEvent( new MouseEvent( 'click' ) );\r\n\t\t}\r\n\t}\r\n\r\n\r\n};\r\n\r\n\r\n\r\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Utility","_classCallCheck","array","index","indexOf","splice","length","Array","fill","slice","min","max","minCeil","Math","ceil","maxFloor","floor","random","Puzzle","width","height","toString","this","parseInt","totalCells","reset","_this","zeroFill","getZeroFilledArray","creator","cells","rowHints","columnHints","grid","map","every","cell","userValue","userSolution","solution","row","i","start","end","push","column","indexInt","PuzzleCell","_createClass","params","aiSolution","assign","PuzzleLine","type","minimumSectionLength","sections","solved","Solver","puzzle","_reset","passStart","passElapsedTime","totalElapsedTime","lineKey","line","Date","getTime","lastProgress","pass","isReset","_log","_getProgress","_getTotalSolved","lines","eliminateImpossibleFits","findKnownPositivesAndNegatives","findSectionDefiningChains","findAnchoredSections","findCompletedSections","findCompletedLines","elapsedTime","section","possibleStartIndex","newPossibleStartIndexes","lineSectionKey","startIndexKey","testCell","lineCellKey","minimumStartIndex","maximumStartIndex","_setCellSolution","cloneArray","possibleStartIndexes","removeFromArray","sectionKey","cellCounts","cellCountKey","cellCount","totalCellCounts","fillRange","firstSection","lastSection","cellKey","chain","chainKey","firstSortedSection","chains","lastValue","sort","a","b","firstNegative","lastNegative","totalSectionLength","totalPositiveSolved","rowNumber","rowCells","len","columnKey","columnHint","possibleRowIndexes","possibleColumnIndexes","solutionLog","getRowCells","knownIndexes","getColumnCells","puzzleCell","isRow","isCol","cellsSolved","html","cssClass","total","maxPossibilities","totalPossibilities","Creator","rowKey","currentVal","lastVal","hintKey","hint","density","cellsFilled","chanceOfCellFill","solutionGrid","rowArray","cellValue","solver","elapsed","puzzleValid","densityValid","getRandomIntBetween","_populatePuzzleFromGrid","solve","_logLine","creationTime","solvingTime","forEach","hints","_typeof","solvedCell","cellIndex","getCellByIndex","msg","log","GuiTemplate","name","path","onLoadedCallbacks","isLoaded","loadedPromise","callback","Promise","resolve","fetch","then","response","ok","text","fireOnLoaded","div","document","createElement","innerHTML","PuzzleLibrary","Gui","themePath","head","querySelector","link","boardSizes","handle","size","boardSize","themeStylesheetPath","rel","href","prepend","templatesLoaded","themeTemplatesPath","templates","template","load","mouseDown","selection","Set","e","dispatchEvent","MouseEvent","_this2","all","drawGenerateControls","drawPuzzle","drawGameControls","drawConsole","_this3","_getTemplate","gridContainer","container","node","getNode","theadThTemplate","rowTemplate","cellClasses","tl","tr","bl","br","columnIndex","theadTh","importNode","content","fillDiv","setAttribute","classList","add","span","textContent","appendChild","parentNode","insertBefore","cellTemplate","hintsFillDiv","td","keys","innerHtml","_resizeBoardForAvailableScreen","_makePuzzlePlayable","drawPreview","_this4","fillModeCheckbox","addEventListener","fillModeLabel","prevActive","prevInactive","remove","checked","playerClickMode","window","removeEventListener","_keypressCallback","_this5","clonedWidthOptions","cloneHeightOptions","widthOption","heightOption","clonedExampleOptions","exampleOption","chooseSelect","clonedSizeOptions","sizeOption","generate","widthSelect","heightSelect","widthOptions","heightOptions","chooseExampleSelect","boardSizeSelect","boardSizeOptions","puzzleName","selectedExample","sizeObj","createRandom","draw","puzzleDef","createFromGrid","createFromHints","item","_changeBoardSize","_resetPuzzle","drawSolution","_showPuzzleSolved","_this6","output","code","solutionType","_this7","cellSize","canvas","ctx","getContext","parentContainer","parentElement","parentWidth","offsetWidth","parentHeight","offsetHeight","containerRatio","puzzleRatio","fillRect","_this8","querySelectorAll","cellElem","puzzleTable","sizeSelect","table","availableWidth","clientWidth","sortedBoardSizes","_this9","allCells","console","hoverCell","currentTarget","getAttribute","cellRef","concat","actualCellRow","actualCellColumn","has","click","solvedP","preventDefault","toggle","checkUserSolution","clear","cellElements","puzzleGrid","tableCells","ret","find"],"sourceRoot":""}